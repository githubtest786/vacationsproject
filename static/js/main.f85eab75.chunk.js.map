{"version":3,"sources":["components/header/header.tsx","components/footer/footer.tsx","models/LoginUserDetails.ts","services/axiosService.tsx","redux/action-type.ts","redux/app-state.ts","redux/store.ts","redux/reducer.ts","components/login/login.tsx","models/SignUpUserDetails.ts","components/signup/signup.tsx","models/SendFollowedVacationDescription.ts","components/vacations/vacations.tsx","services/socketService.tsx","components/admin/admin.tsx","components/charts/charts.tsx","components/addvacation/addvacation.tsx","models/VacationUpdate.ts","components/editvacation/editvacation.tsx","components/Layout/layout.tsx","serviceWorker.ts","index.tsx"],"names":["Header","id","className","Component","Footer","LoginUserDetails","username","password","instance","axios","create","baseURL","token","localStorage","getItem","setAxiousHeaders","defaults","headers","common","interceptors","request","use","error","Promise","reject","response","ActionType","store","createStore","oldAppState","action","newAppState","type","editChosenVacation","chosenVacation","payload","userType","updateVacations","Login","props","setUsername","args","target","value","setState","setPassword","loginUser","a","userDetails","state","post","setItem","data","dispatch","history","push","alert","console","log","this","aria-label","aria-describedby","placeholder","name","onChange","onClick","to","exact","SignUpUserDetails","first_name","last_name","SignUp","setFirstName","setLastName","signUp","currentUsername","takenUserName","i","takenUsernames","length","onlyLetters","message","axiosService","get","str","match","SendFollowedVacationDescription","vacation_description","socket","io","startProcessingInformation","vacationsStorage","setArrayUp","on","backToLogin","removeItem","followedArray","followCell","vacation_id","description","destination","image","dates","price","followers","followed","follows","Array","isVacationPicked","sorting","isChecked","sortArray","response2","checkedLength","followersArray","j","sortVacations","sort","orderMethodVacations","sortChecked","orderMethodFollowers","vacations","updateCheckbox","document","getElementById","checked","b","toggleCheckBox","e","targetLocation","vacationDescription","emit","followed_or_unfollowed","undefined","getState","Error","map","index","key","src","width","height","alt","Admin","userDoesntBelong","editVacation","pickedVacation","pickedTarget","deleteVacation","parseInt","delete","close","bind","toString","Charts","chartDetailsHelper","labels","datasets","label","backgroundColor","borderColor","borderWidth","setLabelsAndData","chartDetails","options","title","display","text","fontSize","legend","position","AddVacation","fileInput","updateDescriptions","takenDescriptions","setDescription","setDestination","setDates","setPrice","addVacation","takenDescription","vacation_image","uploadVacation","err","goBack","imageSelectionHandler","files","fd","FormData","append","style","ref","click","VacationUpdate","EditVacation","previous_description","does_need_image","patch","Layout","path","component","Vacations","from","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f85eab75.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./header.css\";\r\n\r\nexport default class Header extends Component {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <div id = \"title\">\r\n                    <h1><span className=\"brand\">Global</span> tours</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./footer.css\";\r\n\r\nexport default class Footer extends Component {\r\n    public render() {\r\n        return (\r\n            <div>\r\n            All rights reserved to Guy Rozen and Global tours 2020\r\n            </div>\r\n        )\r\n    }\r\n}","export class LoginUserDetails {\r\n    public constructor (\r\n        public username?: string,\r\n        public password?: string,\r\n    ){}\r\n}","// axiosService. Used in order to have a form of an interceptor like the one we have in Angular.\r\n\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://vacationsappapi.herokuapp.com/api\"\r\n});\r\n\r\nlet token = localStorage.getItem(\"key\");\r\n\r\ninstance.defaults.headers.common['Authorization'] = \"Bearer \" + token;\r\n\r\n// console.log(instance.defaults.headers.common['Authorization']);\r\n\r\naxios.interceptors.request.use(request => {\r\n    // console.log(request);\r\n    return request;\r\n}, error => {\r\n    // console.log(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.response.use(response => {\r\n    // console.log(response);\r\n    return response;\r\n}, error => {\r\n    // console.log(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport function setAxiousHeaders () {\r\n    let token = localStorage.getItem(\"key\");\r\n\r\n    instance.defaults.headers.common['Authorization'] = \"Bearer \" + token;\r\n}\r\n\r\nexport default instance;\r\n","export enum ActionType {\r\n    editChosenVacation,\r\n    userType,\r\n    updateVacations\r\n}","import { Vacations } from '../models/Vacations';\r\n\r\nexport class AppState {\r\n    public chosenVacation: Vacations;\r\n    public userType: string;\r\n    public updateVacations: Vacations;\r\n}","import { createStore } from 'redux';\r\nimport { reduce } from './reducer';\r\nimport { AppState } from './app-state';\r\n\r\nexport const store = createStore(reduce, new AppState());","import { AppState } from './app-state';\r\nimport { ActionType } from './action-type';\r\nimport { Action } from './action';\r\n\r\n// This function is not called directly by you\r\n\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n    // Cloning the oldState (creating a copy)\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.editChosenVacation:\r\n            newAppState.chosenVacation = action.payload;\r\n            break;\r\n        case ActionType.userType:\r\n            newAppState.userType = action.payload;\r\n            break;\r\n        case ActionType.updateVacations:\r\n            newAppState.updateVacations = action.payload;\r\n            break;\r\n    }\r\n\r\n    //After returning the new state, it's being published to all subscribers.\r\n    // Each component will render itself based on the new state.\r\n    return newAppState;\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./login.css\";\r\nimport { LoginUserDetails } from '../../models/LoginUserDetails';\r\nimport { SuccessfulLoginResponse } from '../../models/SuccessfulLoginResponse';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { setAxiousHeaders } from '../../services/axiosService';\r\n// import { UserType } from '../../models/UserType';\r\n// import axiosService from '../../services/axiosService';\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\n\r\ninterface LoginUser {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport default class Login extends Component <any, LoginUser> {\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n        this.state = {username: \"\", password: \"\"};\r\n    }\r\n\r\n    public async componentDidMount() { // Sends a user to the vacations component, assuming they already logged in.\r\n\r\n        if (localStorage.getItem(\"key\") != null) {\r\n            // const response = await axiosService.get<UserType>(\"http://localhost:3001/api/users/checkifuserincache\");\r\n            // if (response.data.userType != null) {\r\n            //     if (response.data.userType === \"admin\") {\r\n            //         this.props.history.push('/admin/controlpanel');\r\n            //     }\r\n            //     else {\r\n            //         this.props.history.push('/vacations');\r\n            //     }\r\n            // }\r\n            this.props.history.push('/vacations');\r\n        }\r\n    }\r\n\r\n    private setUsername = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const username = args.target.value;\r\n        this.setState({username : username});\r\n    }\r\n\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        this.setState({password : password});\r\n    }\r\n\r\n    private loginUser = async () => { // Login function.\r\n        try {\r\n            let userDetails = new LoginUserDetails(this.state.username, this.state.password);\r\n            const response = await axios.post<SuccessfulLoginResponse>(\"http://localhost:3001/api/users/login\", userDetails);\r\n            localStorage.setItem(\"key\", response.data.token);\r\n            store.dispatch({ type: ActionType.userType, payload: response.data.userType});\r\n            setAxiousHeaders();\r\n            if (response.data.userType === \"admin\") {\r\n                this.props.history.push('/admin/controlpanel');\r\n            }\r\n            else {\r\n                this.props.history.push('/vacations');\r\n            }\r\n        }\r\n        catch (err) {\r\n            alert (\"Incorrect details, please try again with different ones!\");\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"loginForm\">\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\">Username</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"username\" aria-describedby=\"basic-addon1\" placeholder=\"Username\" name=\"username\" value={this.state.username} onChange={this.setUsername}/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon2\">Password</span>\r\n                        </div>\r\n                        <input type=\"password\" className=\"form-control\" aria-label=\"password\" aria-describedby=\"basic-addon2\" placeholder=\"Password\" name=\"password\" value={this.state.password} onChange={this.setPassword}/><br/>\r\n                    </div>\r\n                </div>\r\n                <input type=\"button\" className=\"btn btn-outline-primary btn-lg\" value=\"Login\" onClick={this.loginUser}/>\r\n                <NavLink to =\"/signup\" exact><input type=\"button\" className=\"btn btn-outline-info btn-lg\" value=\"Not registered? Sign up here!\"></input></NavLink>\r\n            </div>\r\n        )\r\n    }\r\n}","export class SignUpUserDetails {\r\n    public constructor (\r\n        public username?: string,\r\n        public password?: string,\r\n        public first_name?: string,\r\n        public last_name?: string\r\n    ){}\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./signup.css\";\r\nimport { SuccessfulSignUpResponse } from '../../models/SuccessfulSignUpResponse';\r\nimport { SignUpUserDetails } from '../../models/SignUpUserDetails';\r\nimport { UserNames } from '../../models/UserNames';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axiosService from '../../services/axiosService';\r\n\r\ninterface SignUpUser {\r\n    username: string;\r\n    password: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    takenUsernames : UserNames[];\r\n}\r\n\r\nexport default class SignUp extends Component <any, SignUpUser> {\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n        this.state = {username: \"\", password: \"\", first_name: \"\", last_name: \"\", takenUsernames: []};\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        const response = await axiosService.get<UserNames[]>(\"/users/allusernames\");\r\n\r\n        this.setState({\r\n            takenUsernames : response.data\r\n        })\r\n    }\r\n\r\n    private setUsername = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const username = args.target.value;\r\n        this.setState({username : username});\r\n    }\r\n\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        this.setState({password : password});\r\n    }\r\n\r\n    private setFirstName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const first_name = args.target.value;\r\n        this.setState({first_name : first_name});\r\n    }\r\n\r\n    private setLastName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const last_name = args.target.value;\r\n        this.setState({last_name : last_name});\r\n    }\r\n\r\n    private signUp = async () => { // Sign up function. Checks if entered username already exists in the database.\r\n\r\n        let currentUsername = this.state.username;\r\n\r\n        let takenUserName = false;\r\n\r\n        for (let i = 0; i < this.state.takenUsernames.length; i++) {\r\n            if (currentUsername === this.state.takenUsernames[i].username) {\r\n                takenUserName = true;\r\n                i = this.state.takenUsernames.length;\r\n            }\r\n        }\r\n\r\n        if ((this.state.username === \"\") || (this.state.username.length < 3 ) || (this.state.username.length > 20)) {\r\n            alert(\"Username cannot be empty! A username must be between 3 to 20 chars!\");\r\n        }\r\n        else if (takenUserName) {\r\n            alert (\"Username already taken! Please try another one!\");\r\n        }\r\n        else if ((this.state.password === \"\") || (this.state.password.length < 3) || (this.state.password.length > 20)) {\r\n            alert (\"Password cannot be empty! A password must be between 3 to 20 chars!\");\r\n        }\r\n        else if ((this.state.first_name === \"\") || this.onlyLetters(this.state.first_name) === null) {\r\n            alert (\"Firstname cannot be empty! The first name may only consist letters!\");\r\n        }\r\n        else if ((this.state.last_name === \"\") || this.onlyLetters(this.state.last_name) === null) {\r\n            alert (\"Lastname cannot be empty! The first name may only consist letters!\");\r\n        }\r\n        else {\r\n            try {\r\n                let userDetails = new SignUpUserDetails(this.state.username, this.state.password, this.state.first_name, this.state.last_name);\r\n                await axios.post<SuccessfulSignUpResponse>(\"http://localhost:3001/api/users/signup\", userDetails);\r\n                alert(\"Registered successfully! Please login before using our services.\"); \r\n                this.props.history.push('/home');\r\n                // In the project description, its mentioned that once a user is registered, they can automatically enter the system and start using it, but, this sort of\r\n                // method can be problematic to some users - if they don't happen to use the details in order to login for the very first time, they might end up getting\r\n                // confused on future uses regarding what was their usename or password.\r\n                // That's why I am not sending them straight to the vacations page and send back a JWT to store in the localStorage.\r\n            }\r\n            catch (err) {\r\n                alert (err.message);\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onlyLetters(str: string) { // Checks if the input is of only letters.\r\n        return str.match(\"^[A-Za-z]+$\");\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"signup\">\r\n                <NavLink to =\"/home\" exact><input type=\"button\" className=\"btn btn-outline-info btn-lg\" value=\"Back\"></input></NavLink>\r\n                <div className=\"signUpForm\">\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\">Username</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"username\" aria-describedby=\"basic-addon1\" placeholder=\"Username\" name=\"username\" value={this.state.username} onChange={this.setUsername}/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon2\">Password</span>\r\n                        </div>\r\n                        <input type=\"password\" className=\"form-control\" aria-label=\"password\" aria-describedby=\"basic-addon2\" placeholder=\"Password\" name=\"password\" value={this.state.password} onChange={this.setPassword}/><br/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon3\">Firstname</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"firstname\" aria-describedby=\"basic-addon3\" placeholder=\"Firstname\" name=\"firstname\" value={this.state.first_name} onChange={this.setFirstName}/><br/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon4\">Lastname</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"lastname\" aria-describedby=\"basic-addon4\" placeholder=\"Lastname\" name=\"lastname\" value={this.state.last_name} onChange={this.setLastName}/><br/>\r\n                    </div>\r\n                    <input type=\"button\" className=\"btn btn-outline-primary btn-lg\" value=\"Submit\" onClick={this.signUp}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class SendFollowedVacationDescription {\r\n    public constructor (\r\n        public vacation_description?: string,\r\n    ){}\r\n}","import React, { Component } from \"react\";\r\nimport axiosService from '../../services/axiosService';\r\nimport \"./vacations.css\";\r\nimport { Vacations } from '../../models/Vacations';\r\nimport { VacationFollow } from '../../models/VacationFollow';\r\nimport { SendFollowedVacationDescription } from '../../models/SendFollowedVacationDescription';\r\nimport { VacationsFollows } from '../../models/VacationsFollows';\r\nimport { store } from '../../redux/store';\r\nimport { UserType } from '../../models/UserType';\r\n\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3002');\r\n\r\n\r\n\r\ninterface VacationsTemplate {\r\n    vacations: Vacations[];\r\n    isChecked: any;\r\n    checkedLength: number;\r\n    vacationsStorage: Vacations[];\r\n}\r\n\r\nexport default class SignUp extends Component <any, VacationsTemplate> {\r\n\r\n    public constructor (props: any) {\r\n        super(props);\r\n        this.state = { vacations: [], isChecked : [], checkedLength : 0, vacationsStorage: [] };\r\n    }\r\n\r\n    startProcessingInformation = async () => { // Gets the information regarding the vacations from the server. Its stored in a storage that would later on get edited before being displayed.\r\n        const response = await axiosService.get<Vacations[]>(\"/vacations/getallvacations\");\r\n        // console.log(response.data);\r\n\r\n        this.setState({\r\n            vacationsStorage : response.data\r\n        })\r\n\r\n\r\n        this.setArrayUp();\r\n\r\n        socket.on('changedvacations', (data : any) => {\r\n            // console.log(data);\r\n\r\n            this.setState({\r\n                vacationsStorage : data\r\n            })\r\n    \r\n    \r\n            this.setArrayUp();\r\n        })\r\n    }\r\n\r\n    public async componentDidMount() { // Checks if the entering user is logged in. If no data is available due to refresh/the server going down, different methods will occure.\r\n\r\n        if (localStorage.getItem(\"key\") != null) {\r\n            if (store.getState().userType !== undefined) { // Works as a countermeasurement for the server going down and then up again.\r\n                this.startProcessingInformation();\r\n            }\r\n            else {\r\n                console.log(\"Usertype isn't available. Attempting to get one from the server.\");\r\n                try {\r\n                    const response = await axiosService.get<UserType>(\"/users/getuserrole\");\r\n                    console.log(\"Usertype received: \" + response.data.userType);\r\n        \r\n                    if (response.data.userType !== undefined) {\r\n                        this.startProcessingInformation();\r\n                    }\r\n                    else {\r\n                        this.backToLogin();\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    alert(err.response.data.Error);\r\n                    this.backToLogin();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            alert (\"You aren't even logged in.\");\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    private backToLogin = () => {\r\n        localStorage.removeItem(\"key\");\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    updateVacations = async () => { // Updates the vacations array assuming something new changed in the DB (socket)\r\n        const response = await axiosService.get<Vacations[]>(\"/vacations/getallvacations\");\r\n        // console.log(response.data);\r\n\r\n        this.setState({\r\n            vacationsStorage : response.data\r\n        })\r\n\r\n\r\n        this.setArrayUp();\r\n    }\r\n\r\n    setArrayUp = () => { // Processes the information and arranges it differently, in order to get it ready for the desired sorting.\r\n        let followedArray = [];\r\n\r\n        let response = this.state.vacationsStorage;\r\n\r\n        for (let i = 0; i < response.length; i++) {\r\n            let followCell = {\r\n                vacation_id: response[i].vacation_id,\r\n                description: response[i].description,\r\n                destination: response[i].destination,\r\n                image: response[i].image,\r\n                dates: response[i].dates,\r\n                price: response[i].price,\r\n                followers: response[i].followers,\r\n                followed: 0\r\n            }\r\n            followedArray.push(followCell);\r\n        }\r\n\r\n        this.setState({\r\n            vacationsStorage : followedArray\r\n        })\r\n\r\n        let follows = new Array(response.length);\r\n        let isVacationPicked = [];\r\n        for (let i = 0; i < follows.length; i ++) {\r\n            follows[i] = {\r\n                vacation_id : response[i].vacation_id,\r\n                description : response[i].description,\r\n                followed: false,\r\n                sorting: 0\r\n            };\r\n            isVacationPicked[i] = false; \r\n        }\r\n\r\n        this.setState({\r\n            isChecked : follows\r\n        })\r\n\r\n        this.sortArray();\r\n    }\r\n\r\n    sortArray = async () => { // Sorts the array and updates the vacation array that displays everything.\r\n\r\n        const response2 = await axiosService.get<VacationsFollows[]>(\"/vacations/getallvacationsfollows\");\r\n\r\n        let length = response2.data.length;\r\n\r\n        let follows = this.state.isChecked;\r\n\r\n        this.setState({\r\n            checkedLength : length\r\n        })\r\n\r\n        let followersArray = this.state.vacationsStorage;\r\n        let followedArray = this.state.vacationsStorage;\r\n\r\n        for (let i = 0; i < response2.data.length; i++) {\r\n            for (let j = 0; j < follows.length; j++) {\r\n                if (follows[j].description === response2.data[i].description){\r\n                    follows[j].followed = true;\r\n                    follows[j].sorting = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < response2.data.length; i++) {\r\n            for (let j = 0; j < followersArray.length; j++) {\r\n                if (followersArray[j].vacation_id === response2.data[i].vacation_id) {\r\n                    followedArray[j].followed = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            vacationsStorage: followersArray,\r\n            isChecked : follows\r\n        })\r\n\r\n        let sortVacations = this.state.vacationsStorage.sort(this.orderMethodVacations);\r\n\r\n        let sortChecked = this.state.isChecked.sort(this.orderMethodFollowers);\r\n\r\n        this.setState({\r\n            vacations : sortVacations,\r\n            isChecked : sortChecked\r\n        })\r\n\r\n        this.updateCheckbox();\r\n\r\n    }\r\n\r\n    updateCheckbox = () => { // A function that occurs the moment a user follows/unfollows a vacation. Updates the checkboxes when a user presses one of them.\r\n\r\n        for (let i = 0; i < this.state.vacationsStorage.length; i++) {\r\n            let follow = document.getElementById(this.state.vacationsStorage[i].description) as HTMLInputElement;\r\n            follow.checked = false;\r\n        }\r\n\r\n        for (let i = 0; i < this.state.checkedLength; i++) {\r\n            let follow = document.getElementById(this.state.vacationsStorage[i].description) as HTMLInputElement;\r\n            follow.checked = true;\r\n        }\r\n    }\r\n\r\n    orderMethodVacations = (a : any, b : any) => { // Orders the vacations by whether said user follows them or not.\r\n\r\n        let result = 0;\r\n\r\n        let followA = a.followed;\r\n        let followB = b.followed;\r\n\r\n        followA > followB ? result = -1 : result = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    orderMethodFollowers = (a : any, b : any) => { // Orders the vacations in terms of followers - important for dynamically changing the display methods of the checkboxes and the divs in the right order.\r\n\r\n        let result = 0;\r\n\r\n        let followA = a.sorting;\r\n        let followB = b.sorting;\r\n\r\n        followA > followB ? result = -1 : result = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    toggleCheckBox = async (e : any) => { // Happens when a user toggles one of the checkboxes. The information regarding following/unfollowing is saved in the server.\r\n\r\n        // console.log(e.target.id);\r\n\r\n        let target = e.target.id;\r\n\r\n        let targetLocation;\r\n\r\n        for (let i = 0; i < this.state.vacationsStorage.length; i++) {\r\n            if (target === this.state.isChecked[i].description) {\r\n                this.state.isChecked[i].followed = !this.state.isChecked[i].followed;\r\n                targetLocation = i;\r\n            }\r\n        }\r\n\r\n        let vacationDescription = new SendFollowedVacationDescription(target);\r\n\r\n        if (this.state.isChecked[targetLocation].followed) {\r\n            await axiosService.post<VacationFollow>(\"/vacations/followvacation\", vacationDescription);\r\n        }\r\n        else {\r\n            await axiosService.post<VacationFollow>(\"/vacations/unfollowvacation\", vacationDescription);\r\n        }\r\n\r\n        socket.emit('editvacation', { followed_or_unfollowed : \"\" });\r\n\r\n        const response2 = await axiosService.get<Vacations[]>(\"/vacations/getallvacations\");\r\n        this.setState({\r\n            vacationsStorage : response2.data\r\n        })\r\n\r\n        this.setArrayUp();\r\n \r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"vacations\">\r\n                {this.state.vacations.map((vacations, index) => <div key = {index} className=\"vacationBox\">\r\n                    <span className=\"checkBox\">\r\n                        <input type=\"checkbox\" id={vacations.description} onChange={this.toggleCheckBox}></input>\r\n                    </span>\r\n                    <div className=\"vacationBoxDetails\">\r\n                        <div className=\"vacationDescription\">\r\n                        Description: {vacations.description}<br />\r\n                        </div>\r\n                        Destination: {vacations.destination}<br />\r\n                        Dates: {vacations.dates}<br />\r\n                        Price: {vacations.price}<br />\r\n                        <img src={vacations.image}  width=\"40%\" height=\"40%\" alt=\"\"/><br/>\r\n                        Following: {vacations.followers}<br />\r\n                    </div>\r\n                </div>)}\r\n            </div>\r\n        )\r\n    }\r\n}","import io from 'socket.io-client';\r\n// import { ActionType } from '../redux/action-type';\r\n// import { store } from '../redux/store';\r\n\r\nconst socket = io(\"https://vacationsappapi.herokuapp.com\");\r\n\r\nexport default socket;","import React, { Component } from \"react\";\r\nimport \"./admin.css\";\r\nimport { Vacations } from '../../models/Vacations';\r\nimport axiosService from '../../services/axiosService';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { SuccessfulVacationResponse } from '../../models/SuccessfulVacationResponse';\r\n// import io from 'socket.io-client';\r\nimport { UserType } from '../../models/UserType';\r\nimport socket from '../../services/socketService';\r\n\r\ninterface AdminTemplate {\r\n    vacations: Vacations[];\r\n}\r\n\r\nexport default class Admin extends Component<any, AdminTemplate> {\r\n\r\n    // socket = io('http://localhost:3002');\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = { vacations: [] };\r\n    }\r\n\r\n    private updateVacations = async() => { // Updates the vacations array.\r\n        const response = await axiosService.get<Vacations[]>(\"/vacations/getallvacations\");\r\n        // console.log(response.data);\r\n        this.setState({\r\n            vacations: response.data\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socket.close();\r\n    }\r\n\r\n    public async componentDidMount() { // Checks if the entering user is an admin. If no data is available due to refresh/the server going down, different methods will occure.\r\n\r\n\r\n        if (localStorage.getItem(\"key\") != null) {\r\n            if (store.getState().userType === \"admin\") { // Checks if user is an admin. Also works as a countermeasurement for refreshes or the server going down and then up again.\r\n                this.updateVacations();\r\n                socket.on('changedvacations', (data : any) => {\r\n                    this.setState({\r\n                        vacations : data\r\n                    })\r\n                });\r\n            }\r\n            else if (store.getState().userType === undefined) {\r\n                // console.log(\"Usertype isn't available. Attempting to get one from the server.\");\r\n                try {\r\n                    const response = await axiosService.get<UserType>(\"/users/getuserrole\");\r\n                    // console.log(\"Usertype received: \" + response.data.userType);\r\n        \r\n                    if (response.data.userType === \"admin\") {\r\n                        store.dispatch({ type: ActionType.userType, payload: response.data.userType});\r\n        \r\n                        this.updateVacations();\r\n                        socket.on('changedvacations', (data : any) => {\r\n                            this.setState({\r\n                                vacations : data\r\n                            })\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.userDoesntBelong();\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    alert(err.response.data);\r\n                    this.backToLogin();\r\n                }\r\n            }\r\n            else {\r\n                this.userDoesntBelong();\r\n            }\r\n        }\r\n        else {\r\n            alert (\"You aren't even logged in.\");\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    private userDoesntBelong = () => {\r\n        alert(\"You don't belong here, sorry.\");\r\n        localStorage.removeItem(\"key\");\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    private backToLogin = () => {\r\n        localStorage.removeItem(\"key\");\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    private editVacation = (e : any) => { // Updates the redux store and sends the admin to the edit vacation component with the right details.\r\n\r\n        let pickedTarget = e.target.id;\r\n\r\n        let pickedVacation;\r\n\r\n        for (let i = 0; i < this.state.vacations.length; i++) {\r\n            if (pickedTarget === this.state.vacations[i].description) {\r\n                pickedVacation = this.state.vacations[i];\r\n                i = this.state.vacations.length;\r\n            }\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.editChosenVacation, payload: pickedVacation});\r\n\r\n        this.props.history.push('/admin/editvacation');\r\n    }\r\n\r\n    private deleteVacation = async (e: any) => { // Deletes chosen vacation.\r\n\r\n        let vacation_id = parseInt(e.target.id);\r\n\r\n        console.log(vacation_id);\r\n\r\n        try {\r\n            await axiosService.delete<SuccessfulVacationResponse>(\"/vacations/deletevacation/\" + vacation_id);\r\n            socket.emit('deletevacation', { vacation_id: vacation_id });\r\n\r\n            this.updateVacations();\r\n        }\r\n        catch (err) {\r\n            alert(err.message);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"vacations\">\r\n                <NavLink to=\"/admin/charts\" exact><input type=\"button\" value=\"Charts\" className=\"btn btn-outline-info btn-lg\"></input></NavLink>\r\n                <NavLink to=\"/admin/addvacation\" exact><input type=\"button\" value=\"Add new vacation\" className=\"btn btn-outline-primary btn-lg\"></input></NavLink>    \r\n                <br/>\r\n                {this.state.vacations.map(vacations => <div key={vacations.vacation_id} className=\"vacationBox\">\r\n                <div className=\"edit\">\r\n                            <button type=\"submit\" onClick={this.editVacation.bind(this)} id={vacations.description}><span className=\"glyphicon glyphicon-pencil\" id={vacations.description}></span></button>\r\n                        </div>\r\n                        <div className=\"delete\">\r\n                            <button type=\"submit\" onClick={this.deleteVacation.bind(this)} id={vacations.vacation_id.toString()}><span className=\"glyphicon glyphicon-remove\" id={vacations.vacation_id.toString()}></span></button>\r\n                        </div>\r\n                    <div className=\"vacationBoxDetails\">\r\n                        Description: {vacations.description}<br />\r\n                        Destination: {vacations.destination}<br />\r\n                        Dates: {vacations.dates}<br />\r\n                        Price: {vacations.price}<br />\r\n                        <img src={vacations.image}  width=\"40%\" height=\"40%\" alt=\"\"/><br/>\r\n                        Following: {vacations.followers}<br />\r\n                    </div>\r\n                </div>)}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./charts.css\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport { store } from '../../redux/store';\r\n// import io from 'socket.io-client';\r\nimport { ChartInfo } from '../../models/ChartInfo';\r\nimport axiosService from '../../services/axiosService';\r\nimport { UserType } from '../../models/UserType';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport socket from '../../services/socketService';\r\n\r\n\r\ninterface ChartTemplate {\r\n    vacations: ChartInfo[];\r\n    chartDetails: any;\r\n}\r\n\r\n\r\nexport default class Charts extends Component<any, ChartTemplate>  {\r\n\r\n    // socket = io('http://localhost:3002');\r\n\r\n    chartDetailsHelper = { // Required information for chartJS. Used to constantly update the state that the chart attempts to use.\r\n        labels: [\"\"],\r\n        datasets: [\r\n          {\r\n            label: 'Followers',\r\n            backgroundColor: 'rgba(75,192,192,1)',\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth: 2,\r\n            data: [0]\r\n          }\r\n        ]\r\n      }\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacations: [],\r\n            chartDetails: {\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: 'Followers',\r\n                    backgroundColor: 'rgba(75,192,192,1)',\r\n                    borderColor: 'rgba(0,0,0,1)',\r\n                    borderWidth: 2,\r\n                    data: []\r\n                  }\r\n                ]\r\n              }\r\n         };\r\n    }\r\n\r\n    private updateVacations = async() => { // Updates the vacations array.\r\n        const response = await axiosService.get<ChartInfo[]>(\"/vacations/getallvacations\");\r\n        // console.log(response.data);\r\n        this.setState({\r\n            vacations: response.data\r\n        });\r\n\r\n        this.setLabelsAndData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        socket.close();\r\n    }\r\n\r\n    public async componentDidMount() { // Checks if the entering user is an admin. If no data is available due to refresh/the server going down, different methods will occure.\r\n        if (localStorage.getItem(\"key\") != null) {\r\n            if (store.getState().userType === \"admin\") { // Checks if user is an admin. Also works as a countermeasurement for refreshes or the server going down and then up again.\r\n                this.updateVacations();\r\n    \r\n                socket.on('changedvacations', (data : any) => {\r\n        \r\n                    this.updateVacations();\r\n                })\r\n            }\r\n            else if (store.getState().userType === undefined) {\r\n                console.log(\"Usertype isn't available. Attempting to get one from the server.\");\r\n                try {\r\n                    const response = await axiosService.get<UserType>(\"/users/getuserrole\");\r\n                    console.log(\"Usertype received: \" + response.data.userType);\r\n        \r\n                    if (response.data.userType === \"admin\") {\r\n                        store.dispatch({ type: ActionType.userType, payload: response.data.userType});\r\n        \r\n                        this.updateVacations();\r\n        \r\n                        socket.on('changedvacations', (data : any) => {\r\n                \r\n                            this.updateVacations();\r\n                        })\r\n                    }\r\n                    else {\r\n                        this.userDoesntBelong();\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    alert(err.response.data);\r\n                    this.backToLogin();\r\n                }\r\n            }\r\n            else {\r\n                this.userDoesntBelong();\r\n            }\r\n        }\r\n        else {\r\n            alert (\"You aren't even logged in.\");\r\n            this.props.history.push(\"/home\");\r\n        }\r\n\r\n    }\r\n\r\n    private setLabelsAndData = () => { // Sets the labels for the chart.\r\n\r\n        let labels = [];\r\n        let followers = [];\r\n\r\n        for (let i = 0; i < this.state.vacations.length; i++) {\r\n            if (this.state.vacations[i].followers > 0) {\r\n                labels.push(this.state.vacations[i].description);\r\n                followers.push(this.state.vacations[i].followers);\r\n            }\r\n        }\r\n\r\n        this.chartDetailsHelper.labels = labels;\r\n        this.chartDetailsHelper.datasets[0].data = followers;\r\n\r\n        this.setState({\r\n            chartDetails : this.chartDetailsHelper\r\n        })\r\n\r\n    }\r\n\r\n    private userDoesntBelong = () => {\r\n        alert(\"You don't belong here, sorry.\");\r\n        localStorage.removeItem(\"key\");\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    private backToLogin = () => {\r\n        localStorage.removeItem(\"key\");\r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <NavLink to =\"/admin/controlpanel\" exact><input type=\"button\" value=\"Back\" className=\"btn btn-outline-info btn-lg\"></input></NavLink><br/>\r\n                <div className=\"col-md-9 chart\">\r\n                    <Bar\r\n                    data={this.state.chartDetails}\r\n                        options={{\r\n                            title:{\r\n                                display:true,\r\n                                text:'Followers per vacation',\r\n                                fontSize:20\r\n                            },\r\n                            legend:{\r\n                                display:true,\r\n                                position:'right'\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./addvacation.css\";\r\n// import { VacationDetails } from '../../models/VacationDetails';\r\nimport axiosService from '../../services/axiosService';\r\nimport { SuccessfulVacationResponse } from '../../models/SuccessfulVacationResponse';\r\n// import io from 'socket.io-client';\r\nimport { TakenDescriptions } from '../../models/TakenDescriptions';\r\nimport { store } from '../../redux/store';\r\nimport socket from '../../services/socketService';\r\n\r\n// const socket = io('http://localhost:3002');\r\n\r\ninterface AddVacationTemplate {\r\n    description: string,\r\n    destination: string,\r\n    dates: string,\r\n    price: number,\r\n    vacation_image: any,\r\n    takenDescriptions: TakenDescriptions[];\r\n}\r\n\r\nexport default class AddVacation extends Component<any, AddVacationTemplate> {\r\n\r\n    fileInput : any;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = { description: \"\", destination: \"\", dates: \"\", price: 0, vacation_image: null, takenDescriptions: []};\r\n    }\r\n\r\n    private updateDescriptions = async() => { // Gets all already taken descriptions, as descriptions should be unique.\r\n        const response = await axiosService.get<TakenDescriptions[]>(\"/vacations/getallvacationsdescriptions\");\r\n        // console.log(response.data);\r\n        this.setState({\r\n            takenDescriptions: response.data\r\n        });\r\n    }\r\n\r\n    public async componentDidMount() { // Checks if the entering user is an admin. If no data is available due to refresh/the server going down, different methods will occure.\r\n        if (localStorage.getItem(\"key\") != null) {\r\n            if (store.getState().userType === \"admin\") { // Checks if user is an admin. Also works as a countermeasurement for refreshes or the server going down and then up again.\r\n                this.updateDescriptions();\r\n            }\r\n            else {\r\n                alert (\"You have either refreshed the page or entered it directly through the url. Please enter through the control panel, assuming you are an admin.\");\r\n                this.props.history.push('/admin/controlpanel');\r\n            }\r\n        }\r\n        else {\r\n            alert (\"You aren't even logged in.\");\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    private setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        this.setState({description : description});\r\n    }\r\n\r\n    private setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        this.setState({destination : destination});\r\n    }\r\n\r\n    private setDates = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const dates = args.target.value;\r\n        this.setState({dates : dates});\r\n    }\r\n\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = args.target.value;\r\n        this.setState({price : parseInt(price)});\r\n    }\r\n\r\n    private addVacation = async () => { // Adds a vacation assuming it fits the validations.\r\n\r\n        let description = this.state.description;\r\n\r\n        let takenDescription = false;\r\n\r\n        for (let i = 0; i < this.state.takenDescriptions.length; i++) {\r\n            if (description === this.state.takenDescriptions[i].description) {\r\n                takenDescription = true;\r\n                i = this.state.takenDescriptions.length;\r\n            }\r\n        }\r\n\r\n        if (this.state.description === \"\") {\r\n            alert(\"A vacation must have a description!\");\r\n        }\r\n        else if (takenDescription) {\r\n            alert(\"Description is already used by another vacation. Please enter a different one and try again.\")\r\n        }\r\n        else if (this.state.destination === \"\") {\r\n            alert (\"A vacation must have a destination!\");\r\n        }\r\n        else if (this.state.dates === \"\") {\r\n            alert (\"A vacation must have dates!\");\r\n        }\r\n        else if (this.state.price <= 0) {\r\n            alert (\"A vacation must have a price above 0!\");\r\n        }\r\n        else if (this.state.vacation_image === null) {\r\n            alert (\"A vacation must have an image!\");\r\n        }\r\n        else {\r\n            try {\r\n                // let newVacation = new VacationDetails(this.state.description, this.state.destination, this.state.dates, this.state.price);\r\n                // await axiosService.post<SuccessfulVacationResponse>(\"/vacations/addnewvacation\", newVacation);\r\n                this.uploadVacation();\r\n                socket.emit('addvacation', { description: this.state.description, destination: this.state.destination, dates : this.state.dates, price : this.state.price });\r\n                this.props.history.push('/admin/controlpanel');\r\n            }\r\n            catch (err) {\r\n                alert(err.message);\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    private goBack = () => { // Goes back to the control panel.\r\n        this.props.history.push('/admin/controlpanel');\r\n    }\r\n\r\n    imageSelectionHandler = (e : any) => {\r\n        this.setState({\r\n            vacation_image : e.target.files[0]\r\n        })\r\n    }\r\n\r\n    private uploadVacation = async () => { // Uploads a selected image.\r\n\r\n        const fd = new FormData();\r\n        fd.append('image', this.state.vacation_image, this.state.vacation_image.name);\r\n        fd.append('description', this.state.description);\r\n        fd.append('destination', this.state.destination);\r\n        fd.append('dates', this.state.dates);\r\n        fd.append('price', ((this.state.price).toString()));\r\n        await axiosService.post<SuccessfulVacationResponse>(\"/vacations/addnewvacation\", fd);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <input type=\"button\" onClick={this.goBack} value=\"Back\" className=\"btn btn-outline-info btn-lg\"></input>\r\n                <br/>\r\n              <div className=\"addVacationForm\">\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\">Description</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"description\" aria-describedby=\"basic-addon1\" placeholder=\"Description\" name=\"description\" value={this.state.description} onChange={this.setDescription} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon2\">Destination</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"destination\" aria-describedby=\"basic-addon2\" placeholder=\"Destination\" name=\"destination\" value={this.state.destination} onChange={this.setDestination} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon3\">Dates</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"dates\" aria-describedby=\"basic-addon3\" placeholder=\"Dates\" name=\"dates\" value={this.state.dates} onChange={this.setDates} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon4\">Price</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"price\" aria-describedby=\"basic-addon4\" placeholder=\"Price\" name=\"price\" value={this.state.price} onChange={this.setPrice} />\r\n                    </div>\r\n                    <input  style={{display: 'none'}} type=\"file\" onChange={this.imageSelectionHandler} ref={fileInput => this.fileInput = fileInput }/>\r\n                    <input type=\"button\" onClick={() => this.fileInput.click()} className=\"btn btn-outline-info btn-lg\" value=\"Pick vacation image\"/>\r\n                    <br/>\r\n                    <input type=\"button\" className=\"btn btn-outline-primary btn-lg\" onClick={this.addVacation} value=\"Submit\"></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class VacationUpdate {\r\n    public constructor (\r\n        public vacation_id?: number,\r\n        public description?: string,\r\n        public destination?: string,\r\n        public dates?: string,\r\n        public price?: number,\r\n    ){}\r\n}","// This component exists as opposed to be mixed with the addvacation component simply due to making the admin experience less confusing.\r\n// Let's assume some kind of a vacations company owner would receive this website as some sort of a framework for his business.\r\n// If he happens to click on the pencil button of one of the vacations, and he ends up clearing the entire already-stored information, he might end up thinking that he can\r\n// just create an entirely new vacation, even though the new information will override the old one. It is also possible to just entirely alter the the DOM of the addvacations\r\n// component depending on from which button said admin entered the component, but, I believe it'll make reading the component itself more confusing and more cluttered with information.\r\n\r\nimport React, { Component, ChangeEvent } from \"react\";\r\nimport \"./editvacation.css\";\r\nimport { VacationUpdate } from '../../models/VacationUpdate';\r\nimport axiosService from '../../services/axiosService';\r\nimport { SuccessfulVacationResponse } from '../../models/SuccessfulVacationResponse';\r\n// import io from 'socket.io-client';\r\nimport { store } from '../../redux/store';\r\nimport { TakenDescriptions } from '../../models/TakenDescriptions';\r\nimport socket from '../../services/socketService';\r\n\r\n// const socket = io('http://localhost:3002');\r\n\r\ninterface EditVacationTemplate {\r\n    vacation_id: number,\r\n    description: string,\r\n    destination: string,\r\n    dates: string,\r\n    price: number,\r\n    does_need_image: string,\r\n    vacation_image: any,\r\n    previous_description: string,\r\n    takenDescriptions: TakenDescriptions[];\r\n}\r\n\r\nexport default class EditVacation extends Component<any, EditVacationTemplate> {\r\n\r\n    fileInput : any;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = { vacation_id: 0, description: \"\", destination: \"\", dates: \"\", price: 0, does_need_image: \"no\", vacation_image: null, previous_description: \"\", takenDescriptions: []};\r\n    }\r\n\r\n    private updateDescriptions = async() => { // Gets all already taken descriptions, as descriptions should be unique.\r\n        const response = await axiosService.get<TakenDescriptions[]>(\"/vacations/getallvacationsdescriptions\");\r\n        // console.log(response.data);\r\n        this.setState({\r\n            takenDescriptions: response.data\r\n        });\r\n    }\r\n\r\n    public async componentDidMount() { // Checks if the entering user is an admin. If no data is available due to refresh/the server going down, different methods will occure.\r\n\r\n        if (localStorage.getItem(\"key\") != null) { // Checks if a user is already logged in, ot\r\n            if (store.getState().userType === \"admin\") { // Checks if user is an admin. Also works as a countermeasurement for refreshes or the server going down and then up again.\r\n                this.updateDescriptions();\r\n\r\n                this.setState({\r\n                    vacation_id: store.getState().chosenVacation.vacation_id,\r\n                    description: store.getState().chosenVacation.description,\r\n                    destination: store.getState().chosenVacation.destination,\r\n                    dates: store.getState().chosenVacation.dates,\r\n                    price: store.getState().chosenVacation.price,\r\n                    previous_description: store.getState().chosenVacation.description\r\n                })\r\n        \r\n            }\r\n            else {\r\n                alert (\"You have either refreshed the page or entered it directly through the url. Please enter through the control panel, assuming you are an admin.\");\r\n                this.props.history.push('/admin/controlpanel');\r\n            }\r\n        }\r\n        else {\r\n            alert (\"You aren't even logged in.\");\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    private setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        this.setState({description : description});\r\n    }\r\n\r\n    private setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        this.setState({destination : destination});\r\n    }\r\n\r\n    private setDates = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const dates = args.target.value;\r\n        this.setState({dates : dates});\r\n    }\r\n\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = args.target.value;\r\n        this.setState({price : parseInt(price)});\r\n    }\r\n\r\n    private editVacation = async () => { // Edits a vacation assuming the input fits the required validations.\r\n\r\n        let description = this.state.description;\r\n\r\n        let previous_description = this.state.previous_description;\r\n\r\n        let takenDescription = false;\r\n\r\n\r\n        for (let i = 0; i < this.state.takenDescriptions.length; i++) {\r\n            if ((description === this.state.takenDescriptions[i].description) && (description !== previous_description)) {\r\n                takenDescription = true;\r\n                i = this.state.takenDescriptions.length;\r\n            }\r\n        }\r\n\r\n        if (this.state.description === \"\") {\r\n            alert(\"A vacation must have a description!\");\r\n        }\r\n        else if (takenDescription) {\r\n            alert(\"Description is already used by another vacation. Please enter a different one and try again.\")\r\n        }\r\n        else if (this.state.destination === \"\") {\r\n            alert (\"A vacation must have a destination!\");\r\n        }\r\n        else if (this.state.dates === \"\") {\r\n            alert (\"A vacation must have dates!\");\r\n        }\r\n        else if (this.state.price <= 0) {\r\n            alert (\"A vacation must have a price above 0!\");\r\n        }\r\n        else {\r\n            try {\r\n                if (this.state.does_need_image === \"yes\") {\r\n                    this.uploadVacation();\r\n                }\r\n                else {\r\n                    let editVacation = new VacationUpdate(this.state.vacation_id, this.state.description, this.state.destination, this.state.dates, this.state.price);\r\n                    await axiosService.patch<SuccessfulVacationResponse>(\"/vacations/updatevacation\", editVacation);\r\n                }\r\n                socket.emit('editvacation', { description: this.state.description, destination: this.state.destination, dates : this.state.dates, price : this.state.price });\r\n                this.props.history.push('/admin/controlpanel');\r\n            }\r\n            catch (err) {\r\n                alert(err.message);\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    private goBack = () => {\r\n        this.props.history.push('/admin/controlpanel');\r\n    }\r\n\r\n    imageSelectionHandler = (e : any) => {\r\n        this.setState({\r\n            vacation_image : e.target.files[0],\r\n            does_need_image : \"yes\"\r\n        })\r\n    }\r\n\r\n    private uploadVacation = async () => { // Uploads image assuming the admin decided to upload a new image to replace an old one.\r\n        const fd = new FormData();\r\n        fd.append('image', this.state.vacation_image, this.state.vacation_image.name);\r\n        fd.append('vacation_id', ((this.state.vacation_id).toString()));\r\n        fd.append('description', this.state.description);\r\n        fd.append('destination', this.state.destination);\r\n        fd.append('dates', this.state.dates);\r\n        fd.append('price', ((this.state.price).toString()));\r\n        await axiosService.patch<SuccessfulVacationResponse>(\"/vacations/updatevacation\", fd);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <input type=\"button\" onClick={this.goBack} value=\"Back\" className=\"btn btn-outline-info btn-lg\"></input>\r\n                <br/>\r\n              <div className=\"addVacationForm\">\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon1\">Description</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"description\" aria-describedby=\"basic-addon1\" placeholder=\"Description\" name=\"description\" value={this.state.description} onChange={this.setDescription} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon2\">Destination</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"destination\" aria-describedby=\"basic-addon2\" placeholder=\"Destination\" name=\"destination\" value={this.state.destination} onChange={this.setDestination} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon3\">Dates</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"dates\" aria-describedby=\"basic-addon3\" placeholder=\"Dates\" name=\"dates\" value={this.state.dates} onChange={this.setDates} />\r\n                    </div>\r\n\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"basic-addon4\">Price</span>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" aria-label=\"price\" aria-describedby=\"basic-addon4\" placeholder=\"Price\" name=\"price\" value={this.state.price} onChange={this.setPrice} />\r\n                    </div>\r\n                    <input  style={{display: 'none'}} type=\"file\" onChange={this.imageSelectionHandler} ref={fileInput => this.fileInput = fileInput }/>\r\n                    <button onClick={() => this.fileInput.click()} className=\"btn btn-outline-info btn-lg\">Pick vacation image</button>\r\n                    <input type=\"button\" className=\"btn btn-outline-primary btn-lg\" onClick={this.editVacation} value=\"Submit\"></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './layout.css';\r\nimport Header from '../header/header';\r\nimport Footer from '../footer/footer';\r\nimport Login from '../login/login';\r\nimport SignUp from '../signup/signup';\r\nimport Vacations from '../vacations/vacations';\r\nimport Admin from '../admin/admin';\r\nimport Charts from '../charts/charts';\r\nimport AddVacation from '../addvacation/addvacation';\r\nimport EditVacation from '../editvacation/editvacation';\r\nimport { Switch, Route, BrowserRouter, Redirect } from \"react-router-dom\";\r\n\r\nexport default class Layout extends Component {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <section className=\"layout\">\r\n                    <header>\r\n                        <Header />\r\n                    </header>\r\n                    <main>\r\n                        <Switch>\r\n                        <Route path=\"/home\" component={Login} exact />\r\n                        <Route path=\"/signup\" component={SignUp} exact />\r\n                        <Route path=\"/vacations\" component={Vacations} exact />\r\n                        <Route path=\"/admin/controlpanel\" component={Admin} exact />\r\n                        <Route path=\"/admin/charts\" component={Charts} exact />\r\n                        <Route path=\"/admin/addvacation\" component={AddVacation} exact />\r\n                        <Route path=\"/admin/editvacation\" component={EditVacation} exact />\r\n                        <Redirect from=\"/\" to=\"/home\" exact />\r\n                        </Switch>\r\n                    </main>\r\n                    <footer>\r\n                        <Footer />\r\n                    </footer>\r\n            </section>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Layout from './components/Layout/layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Layout />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}